
import streamlit as st
import requests
import json

st.set_page_config(page_title="LiteLLM API Tester", layout="wide")

st.title("üß™ LiteLLM API –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–ª—é—á–∞–º–∏")

# –í–≤–æ–¥ Base URL –∏ —Ç–æ–∫–µ–Ω–∞
st.sidebar.header("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
base_url = st.sidebar.text_input("Base URL", "url")
auth_token = st.sidebar.text_input("API Token", type="password")

headers = {"Authorization": f"Bearer {auth_token}"}

def display_response(response):
    st.code(f"Status: {response.status_code}", language="text")
    try:
        json_data = response.json()
        st.json(json_data)
    except:
        st.text(response.text)

# --- Tabs for different actions ---
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "üë§ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "‚ûï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á",
    "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª—é—á",
    "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"
])

with tab1:
    st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_id_check = st.text_input("User ID", key="check_user")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        if user_id_check:
            resp = requests.get(f"{base_url}/user/info?user_id={user_id_check}", headers=headers)
            display_response(resp)

with tab2:
    st.subheader("üë§ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    new_user_id = st.text_input("User ID", key="create_user_id")
    new_user_alias = st.text_input("User Alias", key="create_user_alias")
    max_budget = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç", value=10.0)
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        data = {
            "user_email": new_user_id,
            "user_id": new_user_id,
            "user_alias": new_user_alias,
            "user_role": "internal_user",
            "teams": ["46f41e55-1133-40e9-9687-bd8197f2d957"],
            "max_budget": max_budget,
            "budget_duration": "30d"
        }
        resp = requests.post(f"{base_url}/user/new", headers=headers, json=data)
        display_response(resp)

with tab3:
    st.subheader("üîë –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    key_user_id = st.text_input("User ID", key="list_keys_user")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏"):
        if key_user_id:
            resp = requests.get(f"{base_url}/key/list?user_id={key_user_id}", headers=headers)
            display_response(resp)

with tab4:
    st.subheader("‚ûï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞")
    key_user_id = st.text_input("User ID", key="gen_key_user")
    key_alias = st.text_input("Key Alias", value="default-key")
    key_budget = st.number_input("–ë—é–¥–∂–µ—Ç –∫–ª—é—á–∞", value=5.0)
    if st.button("–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"):
        data = {
            "user_id": key_user_id,
            "key_alias": key_alias,
            "max_budget": key_budget
        }
        resp = requests.post(f"{base_url}/key/generate", headers=headers, json=data)
        display_response(resp)

with tab5:
    st.subheader("üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª—é—á")
    key_to_disable = st.text_input("Key ID", key="disable_key_id")
    if st.button("–û—Ç–∫–ª—é—á–∏—Ç—å"):
        data = {"key": key_to_disable}
        resp = requests.patch(f"{base_url}/key/disable", headers=headers, json=data)
        display_response(resp)

with tab6:
    st.subheader("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á")
    key_to_delete = st.text_input("Key ID", key="delete_key_id")
    if st.button("–£–¥–∞–ª–∏—Ç—å"):
        data = {"key": key_to_delete}
        resp = requests.post(f"{base_url}/key/delete", headers=headers, json=data)
        display_response(resp)
